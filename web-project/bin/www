#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('web-project:server');
var http = require('http');
var mongoclient = require('mongodb').MongoClient;
var mongoose = require('mongoose');
mongoose.set('useFindAndModify', true);
mongoose.set('useCreateIndex', true);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * mongodb configuration
 */

var db;
var UserSchema;
var UserModel;

function connectDB() {
    var databaseUrl = 'mongodb://localhost:27017/local';
    
    console.log('데이터베이스에 연결되었습니다.: ' + databaseUrl);
    mongoose.Promise = global.Promise;
    mongoose.connect(databaseUrl,{ useUnifiedTopology : true, useNewUrlParser: true });
    db = mongoose.connection;
    
    db.on('error', console.error.bind(console,'mongoose connection error'));
    db.on('open',function(){
        console.log('데이터베이스에 연결되었습니다.' + databaseUrl);
        
        UserSchema = mongoose.Schema({
            id: {type:String, required: true, unique: true},
            name: {type:String, index:'hashed'},
            password: {type:String, rquired: true},
            age: {type:Number, 'default':-1},
            created_at: {type: Date, index:{unique: false},'default': Date.now},
            updated_at: {type: Date, index: {unique: false}, 'default':Date.now}
        });

        UserSchema.static('findById', function(id, callback){
            return this.find({id:id}, callback);
        });
        
        UserSchema.static('findAll', function(callback) {
            return this.find({},callback);
        });
        console.log('UserSchema 정의함');
        
        UserModel = mongoose.model("users2", UserSchema);
        console.log('UserModel 정의함');
    });
    
    db.on('disconnected', function(){
        console.log('연결이 끊어졌습니다. 5초 후 다시 연결합니다.');
        setInterval(connectDB, 5000);
    });
}


/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function() {
  // connect mongodb
  connectDB();

  console.log('서버가 정상적으로 실행됨');
  console.log('http://localhost:3000/');
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
